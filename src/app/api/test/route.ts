import {NextRequest, NextResponse} from 'next/server'
import {client, sql} from '../../../db'

/** Responds with public info about the signed-in user and logs the full auth object */
export async function POST(_request: NextRequest) {
  const testTableData = await client.one(sql<queries.TestTable>`
    insert into test_table (id, name) values (generate_prefixed_ksuid('test_table'), 'one')
    on conflict (id) do update set name = excluded.name
    returning *
  `)
  return NextResponse.json({
    testTableData,
  })
}

export declare namespace queries {
  // Generated by @pgkit/typegen

  /** - query: `insert into test_table (id, name) values... [truncated] ...ate set name = excluded.name returning *` */
  export interface TestTable {
    /** column: `public.test_table.id`, not null: `true`, regtype: `prefixed_ksuid` */
    id: import('~/db').Id<'test_table'>

    /** column: `public.test_table.name`, not null: `true`, regtype: `text` */
    name: string
  }
}
