name: upload artifact action
description: Drop in replacement for actions/upload-artifact which provides a browsable link to the artifact
inputs:
  path:
    description: A file, directory or wildcard pattern that describes what to upload
    required: true
  name:
    description: Name of the artifact to upload
    required: false
    default: artifact
  origin:
    description: The origin of the server to upload the artifact to
    required: false
    default: https://www.artifact.ci
  github-token:
    description: The GitHub token to use for the upload
    required: false
runs:
  using: composite
  steps:
    - name: upload
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.name }}
        path: ${{ inputs.path }}
    - name: print url
      shell: bash
      run: |
        echo 'View your artifact here:'
        echo '${{ inputs.origin }}/artifact/browse/${{ github.repository }}/${{ github.run_id }}/${{ inputs.name }}'
    - name: Checkout artifact.ci
      uses: actions/checkout@v4
      with:
        repository: mmkal/artifact.ci
        path: tmp/artifact.ci
    - name: install
      shell: bash
      run: corepack enable && pnpm install
      working-directory: tmp/artifact.ci
    - name: patch @vercel/blob for debugging
      shell: bash
      working-directory: tmp/artifact.ci
      run: |
        sed -i 's/const res = await _undici.fetch.call/console.log("fetching", {url, options, event});const res = await _undici.fetch.call/g' node_modules/@vercel/blob/dist/client.cjs
        sed -i 's/res.ok/(res.ok || console.log({ res: await res.clone().text() }))/g' node_modules/@vercel/blob/dist/client.cjs
    - name: upload blob
      uses: actions/github-script@v6
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        script: |
          const cwd = process.cwd()
          process.chdir('tmp/artifact.ci')

          const {upload} = require('@vercel/blob/client')
          const fs = require('fs/promises')
          const {lookup: mimeTypeLookup} = require('mime-types')

          process.chdir(cwd)

          const inputs = ${{ toJson(inputs) }}
          const githubToken = inputs['github-token']
          const origin = inputs.origin
          const pathPrefix = '${{ github.repository }}/${{ github.run_id }}/' + inputs.name

          console.log({githubToken, inputs, pathPrefix})

          console.log('lazy url:')
          console.log(`${inputs.origin}/artifact/browse/${pathPrefix}`)

          Object.assign(global, {
            window: {location: new URL(inputs.origin)}, // create a global `window` object to trick @vercel/blob/client into working. for some reason it refuses to run outside of the browser but it's just a `fetch` wrapper
          })

          const stat = await fs.stat(inputs.path).catch(e => {
            if (e.code === 'ENOENT') return null
            throw e
          })
          const globPattern = stat?.isDirectory() ? `${inputs.path}/**/*` : inputs.path
          console.log({globPattern})

          const results = {}
          const globber = await glob.create(globPattern)
          for await (const filepath of globber.globGenerator()) {
            const stat = await fs.stat(filepath)
            if (stat.isDirectory()) continue
            const blobPath = pathPrefix + filepath.replace(process.cwd(), '')
            console.log(`uploading file ${filepath} to ${blobPath}`)
            const result = await upload(blobPath, await fs.readFile(filepath), {
              access: 'public', // todo: allow access level override?
              handleUploadUrl: '/artifact/upload/signed-url',
              contentType: mimeTypeLookup(filepath) || 'text/plain', // todo: allow mime type override?
              clientPayload: JSON.stringify({githubToken}),
            })
            console.log(`uploaded file ${filepath} to ${blobPath}`, result)
            results[blobPath] = result
          }

          if (Object.keys(results).length === 0) {
            console.log('no files to upload')
            return
          }

          console.log(`alright go to:`)
          Object.keys(results).forEach(blobPath => {
            console.log(`${inputs.origin}/artifact/blob/${blobPath}`)
          })
    - name: cleanup
      if: always()
      shell: bash
      run: rm -rf tmp/artifact.ci
