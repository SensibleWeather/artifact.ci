name: upload artifact action
description: 'Manages a deps branch and synchronizes with main branch'
inputs:
  path:
    description: A file, directory or wildcard pattern that describes what to upload
    required: true
  name:
    description: Name of the artifact to upload
    required: false
    default: artifact
  origin:
    description: The origin of the server to upload the artifact to
    required: false
    default: 'https://artifact-browser.vercel.app'
  github-token:
    description: The GitHub token to use for the upload
    required: false
runs:
  using: composite
  steps:
    - id: upload
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.name }}
        path: ${{ inputs.path }}
    - id: print
      name: print url
      shell: bash
      run: |
        echo 'View your artifact here:'
        echo '${{ inputs.origin }}/artifact/browse/${{ github.repository }}/${{ github.run_id }}/${{ inputs.name }}'
    - name: install
      shell: bash
      run: corepack enable && pnpm install
    - name: prep
      shell: bash
      run: |
        echo foo > foo.txt
        sed -i 's/const res = await _undici.fetch.call/console.log("fetching", {url, options}, event);const res = await _undici.fetch.call/g' node_modules/@vercel/blob/dist/client.cjs
        sed -i 's/res.ok/(console.log({ res: await res.clone().text() }) || res.ok)/g' node_modules/@vercel/blob/dist/client.cjs
    - id: upload-blob
      uses: actions/github-script@v6
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        script: |
          console.log('lazy url:')
          console.log('${{ inputs.origin }}/artifact/browse/${{ github.repository }}/${{ github.run_id }}/${{ inputs.name }}')

          const logData = async (label, promise) => console.log(label, await promise.catch(e => e).then(e => e.data || e))

          await logData('repo', github.rest.repos.get(context.repo))
          await logData('ref', github.rest.git.getRef({...context.repo, ref: 'main'}))

          const {upload} = require('@vercel/blob/client')
          const fs = require('fs/promises')
          const {lookup: mimeTypeLookup} = require('mime-types')

          // todo: use core.getInput, not sure why values were blank last time I tried
          const githubToken = '${{ inputs.github-token }}'
          const inputPath = '${{ inputs.path }}'
          const uploadFilePrefix = '${{ github.repository }}/${{ github.run_id }}/${{ inputs.name }}'

          Object.assign(global, {
            window: {location: new URL('https://artifact-browser.vercel.app')}, // create a global `window` object to trick @vercel/blob/client into working. for some reason it refuses to run outside of the browser but it's just a `fetch` wrapper
          })
          console.log(`https://artifact-browser.vercel.app/artifact/blob/${{ github.repository }}/${{ github.run_id }}/${{ inputs.name }}`)

          const stat = await fs.stat(inputPath)
          const globPattern = stat.isDirectory() ? `${inputPath}/**/*` : inputPath
          console.log({globPattern})

          const results = {}
          const globber = await glob.create(globPattern)
          for await (const filepath of globber.globGenerator()) {
            const blobPath = '${{ github.repository }}/${{ github.run_id }}' + filepath.replace(process.cwd(), '')
            console.log(`uploading file ${filepath} to ${blobPath}`)
            const result = await upload(blobPath, await fs.readFile(filepath), {
              access: 'public', // todo: allow access level override?
              handleUploadUrl: '/artifact/upload/signed-url',
              contentType: mimeTypeLookup(filepath) || 'text/plain', // todo: allow mime type override?
              clientPayload: JSON.stringify({
                githubToken,
              }),
            })
            console.log(`uploaded file ${filepath} to ${blobPath}`, result)
            results[blobPath] = result
          }

          console.log(`alright go to:`)
          Object.keys(results).forEach(filepath => {
            console.log(`https://artifact-browser.vercel.app/artifact/blob/${filepath}`)
          })
