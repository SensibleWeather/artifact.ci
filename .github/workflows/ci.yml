name: CI
on: [push, pull_request]

jobs:
  hello_world:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          mkdir test-output
          echo hello > test-output/hello.txt
          echo world > test-output/world.txt
          echo 'console.log("hi")' > test-output/hi.js
      - uses: ./upload
        with:
          name: hello-2-test-output
          path: test-output
          github-token: ${{ secrets.GITHUB_TOKEN }}
  vitest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: mkdir -p vitest
      - name: setup
        working-directory: ./vitest
        run: |
          rm ../package.json
          rm ../pnpm-lock.yaml
          npm install vitest @vitest/ui @types/node --save-dev
          echo 'export const add = (a: number, b: number) => a + b' >> calc.ts
          echo 'export const addBad = (a: number, b: number) => a + b + Math.random()' >> calc.ts
          echo 'export const sub = (a: number, b: number) => a - b' >> calc.ts
          mkdir test
          echo 'import {test, expect} from "vitest"' >> test/adding.test.ts
          echo 'import {add, addBad} from "../calc"' >> test/adding.test.ts
          echo 'test("add well", () => expect(add(1, 1)).toEqual(2))' >> test/adding.test.ts
          echo 'test("add badly", () => expect(addBad(1, 1)).toEqual(2))' >> test/adding.test.ts
      - name: run tests
        working-directory: ./vitest
        run: npx vitest --reporter html || echo failed
      - uses: ./upload
        with:
          name: vitest
          path: vitest/html
  playwright:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup
        run: |
          npm install @playwright/test --save-dev
          echo 'export const add = (a: number, b: number) => a + b' >> calc.ts
          echo 'export const addBad = (a: number, b: number) => a + b + Math.random()' >> calc.ts
          echo 'export const sub = (a: number, b: number) => a - b' >> calc.ts
          mkdir test
          echo 'import {test, expect} from "@playwright/test"' >> test/adding.test.ts
          echo 'import * as calc from "../calc"' >> test/adding.test.ts
          echo 'test("add well", () => expect(calc.add(1, 1)).toEqual(2))' >> test/adding.test.ts
          echo 'test("add badly", () => expect(calc.addBad(1, 1)).toEqual(2))' >> test/adding.test.ts
      - name: run tests
        run: npx playwright test --reporter html || echo failed
      - uses: ./upload
        with:
          name: playwright
          path: playwright-report
  website:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: mkdir -p website
      - name: setup
        working-directory: ./website
        run: |
          npm create astro@latest -- starlightdemo --template starlight --yes
      - name: build site
        run: npm run build
        working-directory: website/starlightdemo
      - uses: ./upload
        with:
          name: website
          path: website/starlightdemo/dist
          fix-html-absolute-paths: yes
  eslint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup
        run: |
          npm install eslint eslint-plugin-mmkal @eslint/config-inspector --save-dev
          echo "module.exports = require('eslint-plugin-mmkal').recommendedFlatConfigs" >> eslint.config.js
      - name: inspect eslint config
        run: npx @eslint/config-inspector build
      - uses: ./upload
        with:
          name: eslint
          path: .eslint-config-inspector
  ava:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup
        run: |
          rm package.json pnpm-lock.yaml
          npm init -y
          npm install ava tap-html
          echo 'exports.add = (a: number, b: number) => a + b' >> calc.js
          echo 'exports.addBad = (a: number, b: number) => a + b + Math.random()' >> calc.js
          mkdir test
          echo 'const {add, addBad} = require("../calc")' >> test/adding.test.js
          echo 'const test = require("ava")' >> test/adding.test.js
          echo 'test("add well", t => t.is(add(1, 1), 2))' >> test/adding.test.js
          echo 'test("add badly", t => t.is(addBad(1, 1), 2))' >> test/adding.test.js
      - name: run tests
        run: npx ava --tap | npx tap-html --out output.html || echo failed
      - uses: ./upload
        with:
          name: ava
          path: output.html
  pytest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup
        run: |
          echo '
          import random

          def add(a, b):
            return a + b
          def addBad(a, b):
            return a + b + random.random()
          def sub(a, b):
            return a - b

          def test_add_well():
            assert add(1, 1) == 2
          def test_add_badly():
            assert addBad(1, 1) == 2
          ' >> test.py
          pip install pytest
          pip install pytest-html
      - name: run tests
        run: pytest test.py --html report/index.html || echo failed
      - uses: ./upload
        with:
          name: pytest
          path: report
  mocha:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup
        run: |
          npm install mocha --save-dev
          echo 'exports.add = (a, b) => a + b' >> calc.js
          echo 'exports.addBad = (a, b) => a + b + Math.random()' >> calc.js
          echo 'exports.sub = (a, b) => a - b' >> calc.js
          mkdir test
          echo 'const assert = require("assert")' >> test/adding.test.js
          echo 'const {add, addBad} = require("../calc")' >> test/adding.test.js
          echo 'it("adds well", () => assert.strictEqual(add(1, 1), 2))' >> test/adding.test.js
          echo 'it("adds badly", () => assert.strictEqual(addBad(1, 1), 2))' >> test/adding.test.js
      - run: npx mocha --reporter doc > output.html || echo failed
      - uses: ./upload
        if: always()
        with:
            name: mocha
            path: output.html
  go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup
        # https://go.dev/doc/tutorial/add-a-test
        run: |
          go mod init example.com/greetings
          go get github.com/vakenbolt/go-test-report
          go install github.com/vakenbolt/go-test-report

          echo 'package greetings

          import "math/rand"

          func Add(a, b int) int {
              return a + b
          }

          func AddBadly(a, b int) int {
              return a + b + rand.Intn(10)
          }' > greetings.go

          echo 'package greetings

          import ("testing")

          func TestAddWell(t *testing.T) {
              actual := Add(1, 1)
              expected := 2
              if actual != expected {
                  t.Errorf("Result was incorrect, got: %d, want: %d.", actual, expected)
              }
          }

          func TestAddBadly(t *testing.T) {
              actual := AddBadly(1, 1)
              expected := 2
              if actual == expected {
                  t.Errorf("Result was unexpectedly correct, got: %d", actual)
              }
          }' > greetings_test.go
      - run: ls ~/go/bin
      - name: run tests
        run: go test -json | ~/go/bin/go-test-report || echo failed
      - uses: ./upload
        with:
          name: go
          path: test_report.html
